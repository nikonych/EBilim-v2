import asyncio
import concurrent.futures
import os
import queue
import zipfile
from threading import Thread
from typing import Union

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from keyboards.inline_admin import accept_user_inl
from keyboards.reply_z_all import menu_frep, darknet
from keyboards.inline_user import *
from loader import dp, bot
import services.dbhandler as db
from services.parser import *
import time
import data.config as config

from services.user_functions import get_profile_text
from utils.misc.bot_filters import IsNoBan


# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(IsNoBan() , text=['‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start'], state="*")
async def main_start(message: Message, state: FSMContext):
    await state.finish()
    get_user = db.get_userx(user_id=message.from_user.id)
    if get_user is not None:
        await message.answer(f"–†–∞–¥ —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ—é —Ä–æ–∂—É —Å–Ω–æ–≤–∞!",
                             reply_markup=menu_frep(message.from_user.id))
    else:
        await message.answer("–ö–∞–∫ —é–Ω–≥–∞ –≤ –ø–µ—Ä–≤–æ–º –ø–ª–∞–≤–∞–Ω—å–µ, –ø—Ä–∏–Ω–∏–º–∞–π —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ!", reply_markup=await accept_license(message.from_user.id))


@dp.callback_query_handler(text_startswith="add_user:", state="*")
async def insert_login(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    await state.finish()
    await message.message.answer("–Ø–∫–æ—Ä—å –º–Ω–µ –≤ –±—É—Ö—Ç—É! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –æ—Ç eBilim")
    await state.set_state("insert_login")


@dp.message_handler(state='insert_login')
async def gg(message: Message, state: FSMContext):
    await state.update_data(insert_login=message.text)
    await message.answer("–ö–∞–∫ –∏—Å–∫–∞—Ç–µ–ª—å —Å–æ–∫—Ä–æ–≤–∏—â, –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    await state.set_state("insert_password")


@dp.message_handler(state='insert_password')
async def gg(message: Message, state: FSMContext):
    async with state.proxy() as data:
        login = data['insert_login']
    password = message.text
    if check_ebilim(login, password):
        await message.answer("–ü–æ–ª–Ω—ã—Ö –ø–∞—Ä—É—Å–æ–≤ –∏ —Å—É—Ö–æ–≥–æ –ø–æ—Ä–æ—Ö–∞!", reply_markup=menu_frep(message.from_user.id))
        db.add_userx(message.from_user.id, message.from_user.username, message.from_user.full_name, login, password)
        await state.finish()
    else:
        await message.answer("–ü—Ä–æ–∫–ª—è—Ç—å–µ –º–µ–¥—É–∑—ã!!! –ü–æ–≤—Ç–æ—Ä–∏–º —Å–Ω–æ–≤–∞")
        await state.finish()
        await state.set_state('insert_login')



# –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(text="üì• –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç", state="*")
async def user_profile(message: Message, state: FSMContext):
    await state.finish()
    info = get_transkript2(message.from_user.id)
    # db.addTranskript(message.from_user.id, info)
    total = 0
    count = 0
    text = ''
    # time.sleep(2)
    for k, v in info.items():
        v = v.split(',')
        pos = k[1].split(" ")
        pos[2] = str(100 - int(pos[2][:-1])) + "%"
        if v[1] == "67":
            if int(float('.'.join(v))) + 1 > 98:
                mark = 5.0
            elif int(float('.'.join(v))) + 1 > 95:
                mark = 4.9
            elif int(float('.'.join(v))) + 1 > 92:
                mark = 4.8
            elif int(float('.'.join(v))) + 1 > 89:
                mark = 4.7
            elif int(float('.'.join(v))) + 1 > 86:
                mark = 4.6
            elif int(float('.'.join(v))) + 1 > 84:
                mark = 4.5
            elif int(float('.'.join(v))) + 1 > 83:
                mark = 4.4
            elif int(float('.'.join(v))) + 1 > 82:
                mark = 4.3
            elif int(float('.'.join(v))) + 1 > 81:
                mark = 4.2
            elif int(float('.'.join(v))) + 1 > 80:
                mark = 4.1
            elif int(float('.'.join(v))) + 1 > 79:
                mark = 4.0
            elif int(float('.'.join(v))) + 1 > 78:
                mark = 3.9
            elif int(float('.'.join(v))) + 1 > 76:
                mark = 3.8
            elif int(float('.'.join(v))) + 1 > 74:
                mark = 3.7
            elif int(float('.'.join(v))) + 1 > 72:
                mark = 3.6
            else:
                mark = 'press F'
            text += '{0}\n {1}\n {2}   {3}\n\n'.format(k[0][:-7], " ".join(pos), int(float('.'.join(v))) + 1, mark)
        else:
            if int(float('.'.join(v))) > 98:
                mark = 5.0
            elif int(float('.'.join(v))) > 95:
                mark = 4.9
            elif int(float('.'.join(v))) > 92:
                mark = 4.8
            elif int(float('.'.join(v))) > 89:
                mark = 4.7
            elif int(float('.'.join(v))) > 86:
                mark = 4.6
            elif int(float('.'.join(v))) > 84:
                mark = 4.5
            elif int(float('.'.join(v))) > 83:
                mark = 4.4
            elif int(float('.'.join(v))) > 82:
                mark = 4.3
            elif int(float('.'.join(v))) > 81:
                mark = 4.2
            elif int(float('.'.join(v))) > 80:
                mark = 4.1
            elif int(float('.'.join(v))) > 79:
                mark = 4.0
            elif int(float('.'.join(v))) > 78:
                mark = 3.9
            elif int(float('.'.join(v))) > 76:
                mark = 3.8
            elif int(float('.'.join(v))) > 74:
                mark = 3.7
            elif int(float('.'.join(v))) > 72:
                mark = 3.6
            else:
                mark = 'press F'
            text += '{0}\n {1}\n {2}   {3}\n\n'.format(k[0][:-7], " ".join(pos), int(float('.'.join(v))), mark)
        total += float('.'.join(v))
        count += 1
    await message.answer(text)
    await message.answer("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ —Å–µ–º–µ—Å—Ç—Ä: " + str(round(total / count, 2)))



@dp.message_handler(text="üòà –¢–µ–º–Ω—ã–µ –¥–µ–ª–∏—à–∫–∏", state="*")
async def user_profile(message: Message, state: FSMContext):
    await message.answer("–¢—ã –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —É–Ω–∏–≤–µ—Ä–∞! –ù–µ –¥–æ–≤–µ—Ä—è–π –Ω–∏–∫–æ–º—É!", reply_markup=darknet(message.from_user.id))



@dp.message_handler(text="–ù–∞–∑–∞–¥", state="*")
async def user_profile(message: Message, state: FSMContext):
    await message.answer(f"–†–∞–¥ —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ—é —Ä–æ–∂—É —Å–Ω–æ–≤–∞!",
                         reply_markup=menu_frep(message.from_user.id))


@dp.message_handler(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", state="*")
async def user_profile(message: Message, state: FSMContext):
    await message.answer("–ö–æ—Ä–æ—á–µ, –ú–µ—á–µ–Ω—ã–π, —è —Ç–µ–±—è —Å–ø–∞—Å –∏ –≤ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ –∏–≥—Ä–∞—Ç—å –Ω–µ –±—É–¥—É:"
                         " –≤—ã–ø–æ–ª–Ω–∏—à—å –¥–ª—è –º–µ–Ω—è –ø–∞—Ä—É –∑–∞–¥–∞–Ω–∏–π ‚Äì –∏ –º—ã –≤ —Ä–∞—Å—á–µ—Ç–µ.\n\n"
                         ""
                         "1) –í—ã–±–∏—Ä–∞–µ—à—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω\n"
                         "2) –í—ã–±–∏—Ä–∞–µ—à—å —Å–≤–æ–π –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è\n"
                         "3) –í—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–µ–¥–º–µ—Ç\n"
                         "4) –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω, —Ç–æ —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ!\n"
                         "5) –ü–∏—à–∏ @dast4nkg –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "6) –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ —Å–æ–≥–ª–∞—Å–∏—è @dast4nkg, —Ç–µ–±–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–≤–∞—Ä!\n"
                         "7) –ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É –º—ã –¥–∞–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Ç–æ—Ç –∫—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª —Ç–æ–≤–∞—Ä)\n"
                         "8) –ï—Å–ª–∏ –¥–æ–∫–∞–∂–µ—à—å —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (—Ö—É–µ–≤—ã–π), –≤–µ—Ä–Ω–µ–º –¥–µ–Ω—å–≥–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –≤–∑—è–ª–∏ –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏—é, –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∑–∞–±–∏—Ä–∞–π –¥–µ–Ω—å–≥–∏ —Å–∞–º!)\n", reply_markup=await be_postavki())



@dp.callback_query_handler(text_startswith="instrusction_postavki", state="*")
async def insert_login(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    await message.message.edit_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä!\n"
                            "\n"
                            "1) –ù–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å \"–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\" —á–µ—Ä–µ–∑ @dast4nkg, –∏ —É –≤–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø\n"
                            "2) –¢–µ–ø–µ—Ä—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ \"–ó–∞–≥—Ä—É–∑–∏—Ç—å\"\n"
                            "3) –ü–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–æ –Ω–æ —á—Ç–æ–±—ã –ø–æ–Ω—è–ª–∏! –ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º 13 –ª–∞–±–∞)\n"
                            "4) –£–∫–∞–∑—ã–≤–∞–µ—à—å —Ü–µ–Ω—É (–Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫—É—é! –¥–æ 300 —Å–æ–º)\n\n"
                            "–í–∞–∂–Ω–æ!!!\n"
                            "5) –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –≤ —Å–≤–æ–π <b>–≥—É–≥–ª –¥–æ–∫</b>(–§–æ—Ç–∫–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) –∏–ª–∏ <b>–≥—É–≥–ª –¥–∏—Å–∫</b>(–µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–π–ª)!!! \n"
                            "6) –ü–æ—Å–ª–µ —Å—é–¥–∞ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –¥–æ—Å—Ç—É–ø–æ–º!!!\n"
                            "\n"
                            "–ê —Ç–µ–ø–µ—Ä—å –æ —Å–∞–º–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º!\n"
                            "7) –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ!\n"
                            "8) –í–∞—à–∞ –¥–æ–ª—è –±—É–¥–µ—Ç 80% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞, 20% –Ω–∞ –ø–µ—á–µ–Ω—å–∫–∏ –∞–¥–º–∏–Ω—É)\n"
                            "9) –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n"
                            "\n"
                            "–ü—Ä–∏ –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–∞—Ö - @dast4nkg\n"
                            , reply_markup=await return_postavki_inl())



@dp.callback_query_handler(text_startswith="return_postavki", state="*")
async def insert_login(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    await message.message.edit_text("–ö–æ—Ä–æ—á–µ, –ú–µ—á–µ–Ω—ã–π, —è —Ç–µ–±—è —Å–ø–∞—Å –∏ –≤ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ –∏–≥—Ä–∞—Ç—å –Ω–µ –±—É–¥—É:"
                         " –≤—ã–ø–æ–ª–Ω–∏—à—å –¥–ª—è –º–µ–Ω—è –ø–∞—Ä—É –∑–∞–¥–∞–Ω–∏–π ‚Äì –∏ –º—ã –≤ —Ä–∞—Å—á–µ—Ç–µ.\n\n"
                         ""
                         "1) –í—ã–±–∏—Ä–∞–µ—à—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω\n"
                         "2) –í—ã–±–∏—Ä–∞–µ—à—å —Å–≤–æ–π –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è\n"
                         "3) –í—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–µ–¥–º–µ—Ç\n"
                         "4) –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω, —Ç–æ —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ!\n"
                         "5) –ü–∏—à–∏ @dast4nkg –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "6) –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ —Å–æ–≥–ª–∞—Å–∏—è @dast4nkg, —Ç–µ–±–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–≤–∞—Ä!\n"
                         "7) –ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—É –º—ã –¥–∞–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Ç–æ—Ç –∫—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª —Ç–æ–≤–∞—Ä)\n"
                         "8) –ï—Å–ª–∏ –¥–æ–∫–∞–∂–µ—à—å —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (—Ö—É–µ–≤—ã–π), –≤–µ—Ä–Ω–µ–º –¥–µ–Ω—å–≥–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –≤–∑—è–ª–∏ –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏—é, –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∑–∞–±–∏—Ä–∞–π –¥–µ–Ω—å–≥–∏ —Å–∞–º!)\n", reply_markup=await be_postavki())


@dp.callback_query_handler(text_startswith="return_darknet", state="*")
async def insert_login(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    await message.message.delete()



@dp.message_handler(text="üìï –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", state="*")
async def info_handler(message: Message, state: FSMContext):
    sch = get_shedule(message.from_user.id)
    text = ""
    for k, v in sch.items():
        if v == []:
            continue
        text += f"<b>{k}</b> :\n"
        for i in v:
            for j in i:
                if j == i[0] or j == i[3]:
                    text += f"<code>{j}</code> | "
                else:
                    text += f"{j} | "
            text += "\n\n"
        text += "\n\n"
    await message.answer(text)



@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def info_handler(message: Message, state: FSMContext):
    user = get_userx(user_id=message.from_user.id)
    if user['payment'] is None:
        await message.answer(await get_profile_text(message.from_user.id), reply_markup=await set_payment_inl())
    else:
        await message.answer(await get_profile_text(message.from_user.id))


@dp.callback_query_handler(text_startswith="return_subjects", state="*")
@dp.message_handler(text="üìÅ –ü—Ä–µ–¥–º–µ—Ç—ã", state="*")
async def info_handler(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    try:
        await message.answer("–ü—Ä–µ–¥–º–µ—Ç—ã", reply_markup=await get_subjects_inl(message.from_user.id))
    except:
        await message.message.edit_text("–ü—Ä–µ–¥–º–µ—Ç—ã", reply_markup=await get_subjects_inl(message.from_user.id))

@dp.callback_query_handler(text_startswith="/StudentJurnal", state="*")
async def insert_login(message: Union['Message', 'CallbackQuery'], state: FSMContext):
    await message.message.edit_text("–ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–ª–∞–≥ –∏ –æ–Ω —Ç–∞–∫–æ–π –∂–µ —á–µ—Ä–Ω—ã–π, –∫–∞–∫ —á–µ—Ä–Ω–æ –¥–Ω–æ –º–∞—Ä–∏–∞–Ω—Å–∫–æ–π –≤–ø–∞–¥–∏–Ω—ã...\n<b>–ñ–¥–∏ –º–∞—Ç—Ä–æ—Å!</b>")
    link = message.data
    subject = get_subject(message.from_user.id, link)
    text = f"–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: <code>{subject[14]}</code>\n" \
           f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <code>{subject[15]}</code>\n\n"
    print(len(subject))
    if len(subject) >= 17:
        k = 1
        text1 = ['–¢–µ—Å—Ç', '–£—Å—Ç–Ω–æ', '–ü–∏—Å—å–º–µ–Ω–Ω–æ', '', '', '', '', '', '', '–ò—Ç–æ–≥ –∫–æ–ª–ª–æ–∫	', '–î–æ–ø–±–∞–ª–ª', '–°—É–º–º–∞', '–û—Ü–µ–Ω–∫–∞']
        for i in range(len(subject[:13])):
            if i in [0, 3, 6]:
                type = text1[0]
            elif i in [1, 4, 7]:
                type = text1[1]
            elif i in [2, 5, 8]:
                type = text1[2]
            if i == 3 or i == 6 or i >= 9:
                k += 1
                text += '\n'
            if i < 9:
                text += f"{k}-{type}: <code>{subject[i]}\n</code>"
            else:
                text += f"{text1[i]}: <code>{subject[i]}\n</code>"

        await message.message.edit_text(text, reply_markup=await return_subjects_inl())


